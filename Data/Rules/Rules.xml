<?xml version="1.0" encoding="utf-8"?>
<ArrayOfRule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Rule>
    <Name>Buy at Market</Name>
    <Description>Enter a new long position next bar at market open.</Description>
    <Category>Basic Entries (Long)</Category>
    <Init />
    <Body>BuyAtMarket(bar + 1, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>LongEntry</RuleType>
    <ID>43026b1b-f7e0-465d-b61c-0652732f8110</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is &lt;X% above Indicator</Name>
    <Description />
    <Category>General Indicators</Category>
    <Init>      DataSeries &lt;#DataSeriesLessPct&gt; = &lt;#Indicator&gt; * (1 + &lt;#Percent&gt;/100d);
</Init>
    <Body>      if( &lt;#Price&gt;[bar]&lt; DataSeriesLessPct[bar])
</Body>
    <Plotting>      PlotSeries(PricePane,  &lt;#DataSeriesLessPct&gt;, Color.Red, LineStyle.Dotted, 2 );
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>933d71e2-43a3-4a4c-bfb8-336305bc477d</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>DataSeriesLessPct</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses X% above Indicator</Name>
    <Description />
    <Category>General Indicators</Category>
    <Init>      DataSeries &lt;#DataSeriesCrossAbove&gt; = &lt;#Indicator&gt; * (1 + &lt;#Percent&gt;/100d);
</Init>
    <Body>      if (CrossOver(bar,&lt;#Price&gt;,DataSeriesCrossAbove))
</Body>
    <Plotting>      PlotSeries(PricePane,  &lt;#DataSeriesCrossAbove&gt;, Color.Red, LineStyle.Dotted, 2 );
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>933d71e2-43a3-4a4c-bfb8-336305bc477d</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>DataSeriesCrossAbove</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is &gt;X% below Indicator</Name>
    <Description />
    <Category>General Indicators</Category>
    <Init>      DataSeries &lt;#DataSeriesGreaterPct&gt; = &lt;#Indicator&gt; * (1 - &lt;#Percent&gt;/100d);
</Init>
    <Body>      if( &lt;#Price&gt;[bar] &gt; DataSeriesGreaterPct[bar])
</Body>
    <Plotting>      PlotSeries(PricePane,  &lt;#DataSeriesGreaterPct&gt;, Color.Red, LineStyle.Dotted, 2 );
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>933d71e2-43a3-4a4c-bfb8-336305bc477d</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>DataSeriesGreaterPct</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses X% below Indicator</Name>
    <Description />
    <Category>General Indicators</Category>
    <Init>      DataSeries &lt;#DataSeriesCrossBelow&gt; = &lt;#Indicator&gt; * (1 - &lt;#Percent&gt;/100d);
</Init>
    <Body>      if (CrossUnder(bar,&lt;#Price&gt;,DataSeriesCrossBelow))
</Body>
    <Plotting>      PlotSeries(PricePane,  &lt;#DataSeriesCrossBelow&gt;, Color.Red, LineStyle.Dotted, 2 );
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>933d71e2-43a3-4a4c-bfb8-336305bc477d</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>DataSeriesCrossBelow</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses above Indicator</Name>
    <Description>Occurs when one indicator crosses over another indicator.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossOver(bar, &lt;#Indicator1&gt;, &lt;#Indicator2&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>f26376de-5e18-4703-ab6a-19740c9e907a</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator1</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses over ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator2</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Market</Name>
    <Description>Sell the long position next bar at the market open.</Description>
    <Category>Basic Exits (Long)</Category>
    <Init />
    <Body>SellAtMarket(bar + 1, p, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>LongExit</RuleType>
    <ID>8c0fce17-b84f-443e-b16c-7cacfecabcaa</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses below Indicator</Name>
    <Description>Occurs when one indicator crosses under another indicator.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossUnder(bar, &lt;#Indicator1&gt;, &lt;#Indicator2&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>6863d3c9-ea74-41c5-b52b-f41ddd394472</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator1</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses under ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator2</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fundamental Item is above a Value</Name>
    <Description>This rule is true whenever the indicated Fundamental data item is above the specified Value.</Description>
    <Category>General Fundamentals</Category>
    <Init>DataSeries &lt;#FundamentalSeries&gt; = FundamentalDataSeries(&lt;#Fundamental Item&gt;);
</Init>
    <Body>if (&lt;#FundamentalSeries&gt;[bar] &gt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>113b2e3a-3400-42b2-b008-4f64f0b9b18c</ID>
    <Parameters>
      <RuleParameter>
        <Name>Fundamental Item</Name>
        <Value>[Click here to select a Fundamental Item]</Value>
        <DefaultValue>[Click here to select a Fundamental Item]</DefaultValue>
        <ParamType>Fundamental</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>FundamentalSeries</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fundamental Item is below a Value</Name>
    <Description />
    <Category>General Fundamentals</Category>
    <Init>DataSeries &lt;#FundamentalSeries&gt; = FundamentalDataSeries(&lt;#Fundamental Item&gt;);
</Init>
    <Body>if (&lt;#FundamentalSeries&gt;[bar] &lt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>3c6611da-cfb8-4185-9fee-ae7869b4d544</ID>
    <Parameters>
      <RuleParameter>
        <Name>Fundamental Item</Name>
        <Value>[Click here to select a Fundamental Item]</Value>
        <DefaultValue>[Click here to select a Fundamental Item]</DefaultValue>
        <ParamType>Fundamental</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is below ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>FundamentalSeries</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD Crosses above Signal Line</Name>
    <Description>Occurs when the MACD indicator crosses above its signal line.  The signal line is an EMA (exponential moving average) of the MACD.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (CrossOver(bar, &lt;#macd&gt;, &lt;#signal&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#signal&gt;,Color.Black,LineStyle.Solid,1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD Crosses below Signal Line</Name>
    <Description>Occurs when the MACD indicator crosses below its signal line.  The signal line is an EMA (exponential moving average) of the MACD.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (CrossUnder(bar, &lt;#macd&gt;, &lt;#signal&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#signal&gt;,Color.Black,LineStyle.Solid,1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>6e7f121c-dc76-43eb-9c4f-ae954a2fc7f0</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses above Price</Name>
    <Description>Occurs when an indicator crosses over a price value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossOver(bar, &lt;#Indicator&gt;, &lt;#Price&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>9110a625-737c-4675-8368-e5af5ef18f98</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses over ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses below Price</Name>
    <Description>Occurs when an indicator crosses under a price value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossUnder(bar, &lt;#Indicator&gt;, &lt;#Price&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>f3ee3c6a-6711-488d-802c-89f2845ce929</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses under ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is above a Value</Name>
    <Description>Occurs when an indicator is above a specific value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] &gt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>c6e94c1c-19d4-4926-8c3b-11a0851c39f1</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>ia above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is below a Value</Name>
    <Description>Occurs when an indicator is below a specified value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] &lt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>d1f922b5-5a77-4274-a643-219446e7a404</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is below ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is equal to Value</Name>
    <Description>Occurs when an indicator is exactly equal to the specified value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] == &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>64ed62df-bd65-4d6c-80e0-73eceac5cba1</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is equal to ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator moving up</Name>
    <Description>Occurs when the indicator is higher than it was a number of bars ago.  The number of bars is determined by the Lookback Period.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] &gt; &lt;#Indicator&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>c885c73a-cb53-4e5a-8055-10a5db2b8eb9</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator moving down</Name>
    <Description>Occurs when the indicator is lower than it was a number of bars ago.  The number of bars is determined by the Lookback Period.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] &lt; &lt;#Indicator&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>de2dea3c-bb1f-48df-b952-c93dae860110</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is above Indicator</Name>
    <Description>Occurs when one indicator's value is above another indicator's value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator1&gt;[bar] &gt; &lt;#Indicator2&gt;[bar])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>ff542870-6112-4ecf-b638-7221728ea184</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator1</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator2</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is below Indicator</Name>
    <Description>Occurs when one indicator's value is below another indicator's value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator1&gt;[bar] &lt; &lt;#Indicator2&gt;[bar])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>c27a6f4e-a01c-4923-98e5-099fcafdf919</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator1</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is below ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator2</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is equal to Indicator</Name>
    <Description>Occurs when one indicator's value is equal to another indicator's value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator1&gt;[bar] == &lt;#Indicator2&gt;[bar])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>47d4fe7b-836e-4462-a9d5-a9026363c3d6</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator1</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is equal to ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Indicator2</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses above a Value</Name>
    <Description>Occurs when an indicator crosses above a specific value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossOver(bar, &lt;#Indicator&gt;, &lt;#Value&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>d80ffa6f-ed70-4b0a-ab3d-bb934b434fb3</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses below a Value</Name>
    <Description>Occurs when an indicator crosses below a specified value.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossUnder(bar, &lt;#Indicator&gt;, &lt;#Value&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>2680d515-5a9e-4762-9392-41db29be88f1</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses below ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses above Smoothed Version</Name>
    <Description>Occurs when an indicator crosses above its smoothed version.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossOver(bar, &lt;#Indicator&gt;, SMA.Series(&lt;#Indicator&gt;, &lt;#Smoothing&gt;)))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>4467f6b2-ebd7-440e-8f91-8ea511a106bf</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Smoothing</Name>
        <Value>6</Value>
        <DefaultValue>6</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>bars</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator crosses below Smoothed Version</Name>
    <Description>Occurs when an indicator crosses below its smoothed version.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CrossUnder(bar, &lt;#Indicator&gt;, SMA.Series(&lt;#Indicator&gt;, &lt;#Smoothing&gt;)))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>c02e5b80-d864-440c-a0df-a85aedc69a01</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>crosses above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Smoothing</Name>
        <Value>6</Value>
        <DefaultValue>6</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>bars</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at Market</Name>
    <Description>Enter a new short position next bar at market open.</Description>
    <Category>Basic Entries (Short)</Category>
    <Init />
    <Body>ShortAtMarket(bar + 1, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>ShortEntry</RuleType>
    <ID>b6a56680-bec2-4293-ba52-a6ae218af81d</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Market</Name>
    <Description>Cover the short position next bar at the market open.</Description>
    <Category>Basic Exits (Short)</Category>
    <Init />
    <Body>CoverAtMarket(bar + 1, p, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>ShortExit</RuleType>
    <ID>50d4dc6f-7790-4b19-8539-69286b2c9afb</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at Close</Name>
    <Description>Enter a new long position this bar at market close.  (Warning: because this entry executes on the current bar it cannot generate a Trade Alert)</Description>
    <Category>Basic Entries (Long)</Category>
    <Init />
    <Body>BuyAtClose(bar, &lt;#SignalName&gt;);</Body>
    <Plotting />
    <RuleType>LongEntry</RuleType>
    <ID>8f76df45-42a3-43d5-9b55-fa185f774a9c</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Close</Name>
    <Description>Sell the long position this bar at the market close.  (Warning: because this exit executes on the current bar it cannot generate a Trade Alert)</Description>
    <Category>Basic Exits (Long)</Category>
    <Init />
    <Body>SellAtClose(bar, p, &lt;#SignalName&gt;);</Body>
    <Plotting />
    <RuleType>LongExit</RuleType>
    <ID>5f66f9a5-e88f-40f0-afd0-308a1a884104</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at Close</Name>
    <Description>Enter a new short position this bar at market close.  (Warning: because this entry executes on the current bar it cannot generate a Trade Alert)</Description>
    <Category>Basic Entries (Short)</Category>
    <Init />
    <Body>ShortAtClose(bar, &lt;#SignalName&gt;);</Body>
    <Plotting />
    <RuleType>ShortEntry</RuleType>
    <ID>ce6b59f3-04b2-41dc-b712-b4b7a9c6652c</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Close</Name>
    <Description>Cover the short position this bar at the market close.  (Warning: because this exit executes on the current bar it cannot generate a Trade Alert)</Description>
    <Category>Basic Exits (Short)</Category>
    <Init />
    <Body>CoverAtClose(bar, p, &lt;#SignalName&gt;);</Body>
    <Plotting />
    <RuleType>ShortExit</RuleType>
    <ID>8ca6d265-ef9f-48e3-b401-6919760800ac</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at Limit</Name>
    <Description>Enter a new long position next bar using a limit order.  The limit order price can be based on open, high, low, or close of the current bar.</Description>
    <Category>Basic Entries (Long)</Category>
    <Init />
    <Body>BuyAtLimit(bar + 1, &lt;#Limit Price&gt;[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>LongEntry</RuleType>
    <ID>3b7d1fa9-550e-4d00-b198-0577ef4d7d63</ID>
    <Parameters>
      <RuleParameter>
        <Name>Limit Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at Limit</Name>
    <Description>Enter a new short position next bar using a limit order.  The limit order price can be based on open, high, low, or close of the current bar.</Description>
    <Category>Basic Entries (Short)</Category>
    <Init />
    <Body>ShortAtLimit(bar + 1, &lt;#Limit Price&gt;[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>ShortEntry</RuleType>
    <ID>daa27aab-bd09-4651-8199-ced884055ccf</ID>
    <Parameters>
      <RuleParameter>
        <Name>Limit Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Profit Target</Name>
    <Description>Sell the long position next bar using a limit order based on the specified percentage profit.</Description>
    <Category>Basic Exits (Long)</Category>
    <Init />
    <Body>double &lt;#Target&gt; = p.EntryPrice * (1 + &lt;#Profit Target %&gt; / 100.0d);
SellAtLimit(bar + 1, p, &lt;#Target&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>LongExit</RuleType>
    <ID>8f52d262-7ff3-4fc5-9a82-14f27391d1f0</ID>
    <Parameters>
      <RuleParameter>
        <Name>Profit Target %</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Target</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Profit Target</Name>
    <Description>Cover the short position next bar using a limit order based on the specified percentage profit.</Description>
    <Category>Basic Exits (Short)</Category>
    <Init />
    <Body>double &lt;#Target&gt; = p.EntryPrice * (1 - &lt;#Profit Target %&gt; / 100.0d);
CoverAtLimit(bar + 1, p, &lt;#Target&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>ShortExit</RuleType>
    <ID>d0188673-31ff-495a-9717-e9673a344e38</ID>
    <Parameters>
      <RuleParameter>
        <Name>Profit Target %</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Target</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Stop Loss</Name>
    <Description>Sell the long position next bar using a stop order based on the specified percentage stop loss.</Description>
    <Category>Basic Exits (Long)</Category>
    <Init />
    <Body>double &lt;#Stop&gt; = p.EntryPrice * (1 - &lt;#Stop Loss %&gt; / 100.0d);
SellAtStop(bar + 1, p, &lt;#Stop&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>LongExit</RuleType>
    <ID>36b1212e-abcf-43b9-86f6-565c0cc04511</ID>
    <Parameters>
      <RuleParameter>
        <Name>Stop Loss %</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Stop</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Stop Loss</Name>
    <Description>Cover the short position next bar using a stop order based on the specified percentage stop loss.</Description>
    <Category>Basic Exits (Short)</Category>
    <Init />
    <Body>double &lt;#Stop&gt; = p.EntryPrice * (1 + &lt;#Stop Loss %&gt; / 100.0d);
CoverAtStop(bar + 1, p, &lt;#Stop&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>ShortExit</RuleType>
    <ID>9b9ee473-9a46-499a-b752-76df10e26ef4</ID>
    <Parameters>
      <RuleParameter>
        <Name>Stop Loss %</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Stop</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator turns up</Name>
    <Description>Occurs when the indicator turns up after moving down.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (TurnUp(bar, &lt;#Indicator&gt;))</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>b1d302b6-7e7a-4eb6-ac55-53d136008aa4</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator turns down</Name>
    <Description>Occurs when the indicator turns down after moving up.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (TurnDown(bar, &lt;#Indicator&gt;))</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>6dd6e1eb-2d9a-4d59-b720-b460812533ad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is above Moving Average</Name>
    <Description>Occurs when a Price value is above a Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (&lt;#Price&gt;[bar] &gt; &lt;#ma&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is below Moving Average</Name>
    <Description>Occurs when a Price value is below a Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (&lt;#Price&gt;[bar] &lt; &lt;#ma&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses above Moving Average</Name>
    <Description>Occurs when a Price value crosses above a Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (CrossOver(bar, &lt;#Price&gt;, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses below Moving Average</Name>
    <Description>Occurs when a Price value crosses below a Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (CrossUnder(bar, &lt;#Price&gt;, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Moving Average is trending up</Name>
    <Description>Occurs when a Moving Average is higher than it was a certain number of bars ago.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (&lt;#ma&gt;[bar] &gt; &lt;#ma&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>bars</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Moving Average is trending down</Name>
    <Description>Occurs when a Moving Average is lower than it was a certain number of bars ago.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (&lt;#ma&gt;[bar] &lt; &lt;#ma&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>bars</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Moving Average turns up</Name>
    <Description>Occurs when a Moving Average turns up after moving downward.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (TurnUp(bar, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Moving Average turns down</Name>
    <Description>Occurs when a Moving Average turns down after moving upward.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;);
</Init>
    <Body>if (TurnDown(bar, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#MA Period&gt;),Color.Blue,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fast Moving Average is above Slow Moving Average</Name>
    <Description>Occurs when a fast Moving Average is above a slow Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#maFast&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Fast Period&gt;);
DataSeries &lt;#maSlow&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Slow Period&gt;);
</Init>
    <Body>if (&lt;#maFast&gt;[bar] &gt; &lt;#maSlow&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Fast Period&gt;),Color.Red,LineStyle.Solid,2);
PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Slow Period&gt;),Color.Green,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Fast Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Slow Period</Name>
        <Value>60</Value>
        <DefaultValue>60</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>maFast</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>maSlow</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fast Moving Average is below Slow Moving Average</Name>
    <Description>Occurs when a fast Moving Average is below a slow Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#maFast&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Fast Period&gt;);
DataSeries &lt;#maSlow&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Slow Period&gt;);
</Init>
    <Body>if (&lt;#maFast&gt;[bar] &lt; &lt;#maSlow&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Fast Period&gt;),Color.Red,LineStyle.Solid,2);
PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Slow Period&gt;),Color.Green,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Fast Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Slow Period</Name>
        <Value>60</Value>
        <DefaultValue>60</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>maFast</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>maSlow</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fast Moving Average crosses above Slow Moving Average</Name>
    <Description>Occurs when a fast Moving Average crosses above a slow Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#maFast&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Fast Period&gt;);
DataSeries &lt;#maSlow&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Slow Period&gt;);
</Init>
    <Body>if (CrossOver(bar, &lt;#maFast&gt;, &lt;#maSlow&gt;))
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Fast Period&gt;),Color.Red,LineStyle.Solid,2);
PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Slow Period&gt;),Color.Green,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Fast Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Slow Period</Name>
        <Value>60</Value>
        <DefaultValue>60</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>maFast</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>maSlow</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fast Moving Average crosses below Slow Moving Average</Name>
    <Description>Occurs when a fast Moving Average crosses below a slow Moving Average.</Description>
    <Category>Moving Average</Category>
    <Init>DataSeries &lt;#maFast&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Fast Period&gt;);
DataSeries &lt;#maSlow&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#Slow Period&gt;);
</Init>
    <Body>if (CrossUnder(bar, &lt;#maFast&gt;, &lt;#maSlow&gt;))
</Body>
    <Plotting>PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Fast Period&gt;),Color.Red,LineStyle.Solid,2);
PlotSeries(PricePane,&lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;,&lt;#Slow Period&gt;),Color.Green,LineStyle.Solid,2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>89828b45-f1d7-471c-a5ae-eebef5373c4f</ID>
    <Parameters>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Fast Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Slow Period</Name>
        <Value>60</Value>
        <DefaultValue>60</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>maFast</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>maSlow</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Limit</Name>
    <Description>Attempt to sell the current open long Position next bar using a limit order.  The limit order price can be based on open, high, low or close of the current bar.</Description>
    <Category>Basic Exits (Long)</Category>
    <Init />
    <Body>SellAtLimit(bar + 1, p, &lt;#Limit Price&gt;[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting />
    <RuleType>LongExit</RuleType>
    <ID>15a6a890-aec1-4d9f-99a1-ba529c95d83c</ID>
    <Parameters>
      <RuleParameter>
        <Name>Limit Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Limit</Name>
    <Description>Attempt to cover the current open short Position next bar using a limit order.  The limit order price can be based on open, high, low or close of the current bar.</Description>
    <Category>Basic Exits (Short)</Category>
    <Init />
    <Body>CoverAtLimit(bar + 1, p, &lt;#Limit Price&gt;[bar], &lt;#SignalName&gt;);</Body>
    <Plotting />
    <RuleType>ShortExit</RuleType>
    <ID>5e808017-7197-4d6d-afee-ef1d3058de89</ID>
    <Parameters>
      <RuleParameter>
        <Name>Limit Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at stop Channel High</Name>
    <Description>Attempts to buy using a stop order on the next bar.  The stop price is the highest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>BuyAtStop(bar + 1, Highest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Highest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongEntry</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>High</Value>
        <DefaultValue>High</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at limit Channel Low</Name>
    <Description>Attempts to buy using a limit order on the next bar.  The limit price is the lowest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>BuyAtLimit(bar + 1, Lowest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Lowest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongEntry</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>Low</Value>
        <DefaultValue>Low</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at stop Channel Low</Name>
    <Description>Attempts to short using a stop order on the next bar.  The stop price is the lowest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>ShortAtStop(bar + 1, Lowest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Lowest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortEntry</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>Low</Value>
        <DefaultValue>Low</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at stop Channel High</Name>
    <Description>Attempts to cover the open short position using a stop order on the next bar.  The stop price is the highest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>CoverAtStop(bar + 1, p, Highest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Highest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>High</Value>
        <DefaultValue>High</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at limit Channel High</Name>
    <Description>Attempts to short using a limit order on the next bar.  The limit price is the highest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>ShortAtLimit(bar + 1, Highest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Highest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortEntry</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>High</Value>
        <DefaultValue>High</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at limit Channel High</Name>
    <Description>Attempts to sell the open long position using a limit order on the next bar.  The limit price is the highest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>SellAtLimit(bar + 1, p, Highest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Highest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>High</Value>
        <DefaultValue>High</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at stop Channel Low</Name>
    <Description>Attempts to sell the open long position using a stop order on the next bar.  The stop price is the lowest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>SellAtStop(bar + 1, p, Lowest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Lowest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>Low</Value>
        <DefaultValue>Low</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at limit Channel Low</Name>
    <Description>Attempts to cover the open short position using a limit order on the next bar.  The limit price is the lowest Price value within a specific lookback period.</Description>
    <Category>Channel Breakouts</Category>
    <Init />
    <Body>CoverAtLimit(bar + 1, p, Lowest.Value(bar, &lt;#Channel Price&gt;, &lt;#Channel Period&gt;), &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Lowest.Series(&lt;#Channel Price&gt;, &lt;#Channel Period&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>a976a0ea-30d4-48dd-a339-9ef7254160fb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Channel Price</Name>
        <Value>Low</Value>
        <DefaultValue>Low</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Channel Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at dollar based Trailing Stop</Name>
    <Description>Sells the open long position next bar using a stop order.  The stop price trails a fixed dollar amount below the highest high achieved since the position was opened.</Description>
    <Category>Trailing Stops</Category>
    <Init />
    <Body>double &lt;#amount&gt; = p.MFEAsOfBar(bar) / p.Shares + p.EntryPrice - &lt;#Dollar Amount&gt;;
SellAtTrailingStop(bar + 1, p, &lt;#amount&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>80a87dc9-3068-4c7e-8787-877e0d553c50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Dollar Amount</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>1000</Stop>
        <Step>10</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>amount</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at dollar based Trailing Stop</Name>
    <Description>Covers the open short position next bar using a stop order.  The stop price trails a fixed dollar amount above the lowest low achieved since the position was opened.</Description>
    <Category>Trailing Stops</Category>
    <Init />
    <Body>double &lt;#amount&gt; = p.EntryPrice - (p.MFEAsOfBar(bar) / p.Shares) + &lt;#Dollar Amount&gt;;
CoverAtTrailingStop(bar + 1, p, &lt;#amount&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>80a87dc9-3068-4c7e-8787-877e0d553c50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Dollar Amount</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>1000</Stop>
        <Step>10</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>amount</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at percent based Trailing Stop</Name>
    <Description>Sells the open long position next bar using a stop order.  The stop price trails a fixed percentage amount below the highest high achieved since the position was opened.</Description>
    <Category>Trailing Stops</Category>
    <Init />
    <Body>double &lt;#high&gt; = p.MFEAsOfBar(bar) / p.Shares + p.EntryPrice;
double &lt;#amount&gt; = &lt;#high&gt; - &lt;#high&gt; * (&lt;#Percent&gt; / 100.0d);
SellAtTrailingStop(bar + 1, p, &lt;#amount&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>80a87dc9-3068-4c7e-8787-877e0d553c50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>amount</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>high</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at percent based Trailing Stop</Name>
    <Description>Covers the open short position next bar using a stop order.  The stop price trails a fixed percentage amount above the lowest low achieved since the position was opened.</Description>
    <Category>Trailing Stops</Category>
    <Init />
    <Body>double &lt;#low&gt; = p.EntryPrice - (p.MFEAsOfBar(bar) / p.Shares);
double &lt;#amount&gt; = &lt;#low&gt; + &lt;#low&gt; * (&lt;#Percent&gt; / 100.0d);
CoverAtTrailingStop(bar + 1, p, &lt;#amount&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>80a87dc9-3068-4c7e-8787-877e0d553c50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>amount</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>low</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Breakeven Stop</Name>
    <Description>Issues a sell at stop order for the next bar, at the position's entry price, once the profit of the long Position has passed the Trigger Level.</Description>
    <Category>Breakeven Stops</Category>
    <Init />
    <Body>if (p.MFEAsOfBarPercent(bar) &gt;= &lt;#Trigger Level&gt;)
	SellAtStop(bar + 1, p, p.EntryPrice, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>6da4f344-9aaa-4143-b5d1-7493346c89ad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Trigger Level</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Breakeven Stop</Name>
    <Description>Issues a cover at stop order for the next bar, at the position's entry price, once the profit of the short Position has passed the Trigger Level.</Description>
    <Category>Breakeven Stops</Category>
    <Init />
    <Body>if (p.MFEAsOfBarPercent(bar) &gt;= &lt;#Trigger Level&gt;)
	CoverAtStop(bar + 1, p, p.EntryPrice, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>6da4f344-9aaa-4143-b5d1-7493346c89ad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Trigger Level</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Reverse Breakeven Stop</Name>
    <Description>Issues a sell at limit order for the next bar, at the position's entry price, once the loss of the long Position has exceeded the Trigger Level.</Description>
    <Category>Breakeven Stops</Category>
    <Init />
    <Body>if (Math.Abs(p.MAEAsOfBarPercent(bar)) &gt;= &lt;#Trigger Level&gt;)
	SellAtLimit(bar + 1, p, p.EntryPrice, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>6da4f344-9aaa-4143-b5d1-7493346c89ad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Trigger Level</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Reverse Breakeven Stop</Name>
    <Description>Issues a cover at limit order for the next bar, at the position's entry price, once the loss of the short Position has exceeded the Trigger Level.</Description>
    <Category>Breakeven Stops</Category>
    <Init />
    <Body>if (Math.Abs(p.MAEAsOfBarPercent(bar)) &gt;= &lt;#Trigger Level&gt;)
	CoverAtLimit(bar + 1, p, p.EntryPrice, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>6da4f344-9aaa-4143-b5d1-7493346c89ad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Trigger Level</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Fundamental Item is equal to a Value</Name>
    <Description>This rule is true whenever the indicated Fundamental data item is exactly equal to the specified Value.</Description>
    <Category>General Fundamentals</Category>
    <Init>DataSeries &lt;#FundamentalSeries&gt; = FundamentalDataSeries(&lt;#Fundamental Item&gt;);
</Init>
    <Body>if (&lt;#FundamentalSeries&gt;[bar] == &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>113b2e3a-3400-42b2-b008-4f64f0b9b18c</ID>
    <Parameters>
      <RuleParameter>
        <Name>Fundamental Item</Name>
        <Value>[Click here to select a Fundamental Item]</Value>
        <DefaultValue>[Click here to select a Fundamental Item]</DefaultValue>
        <ParamType>Fundamental</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is above ...</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>FundamentalSeries</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at Parabolic Stop</Name>
    <Description>Attempts to buy on the next bar using a stop order set at the current value of the Parabolic indicator.</Description>
    <Category>Parabolic Entries and Exits</Category>
    <Init />
    <Body>BuyAtStop(bar + 1, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;)[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;), Color.Black, LineStyle.Dots, 3);
</Plotting>
    <RuleType>LongEntry</RuleType>
    <ID>aae31d6f-7738-44a4-9173-7aa0dfd86179</ID>
    <Parameters>
      <RuleParameter>
        <Name>Accel Up</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Down</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Max</Name>
        <Value>0.2</Value>
        <DefaultValue>0.2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.1</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at Parabolic Stop</Name>
    <Description>Attempts to sell the open long position on the next bar using a stop order set at the current value of the Parabolic indicator.</Description>
    <Category>Parabolic Entries and Exits</Category>
    <Init />
    <Body>SellAtStop(bar + 1, p, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;)[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;), Color.Black, LineStyle.Dots, 3);
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>aae31d6f-7738-44a4-9173-7aa0dfd86179</ID>
    <Parameters>
      <RuleParameter>
        <Name>Accel Up</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Down</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Max</Name>
        <Value>0.2</Value>
        <DefaultValue>0.2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.1</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at Parabolic Stop</Name>
    <Description>Attempts to short on the next bar using a stop order set at the current value of the Parabolic indicator.</Description>
    <Category>Parabolic Entries and Exits</Category>
    <Init />
    <Body>ShortAtStop(bar + 1, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;)[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;), Color.Black, LineStyle.Dots, 3);
</Plotting>
    <RuleType>ShortEntry</RuleType>
    <ID>aae31d6f-7738-44a4-9173-7aa0dfd86179</ID>
    <Parameters>
      <RuleParameter>
        <Name>Accel Up</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Down</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Max</Name>
        <Value>0.2</Value>
        <DefaultValue>0.2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.1</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at Parabolic Stop</Name>
    <Description>Attempts to cover the open short position on the next bar using a stop order set at the current value of the Parabolic indicator.</Description>
    <Category>Parabolic Entries and Exits</Category>
    <Init />
    <Body>CoverAtStop(bar + 1, p, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;)[bar], &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, Parabolic.Series(Bars, &lt;#Accel Up&gt;, &lt;#Accel Down&gt;, &lt;#Accel Max&gt;), Color.Black, LineStyle.Dots, 3);
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>aae31d6f-7738-44a4-9173-7aa0dfd86179</ID>
    <Parameters>
      <RuleParameter>
        <Name>Accel Up</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Down</Name>
        <Value>0.02</Value>
        <DefaultValue>0.02</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.01</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Accel Max</Name>
        <Value>0.2</Value>
        <DefaultValue>0.2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0.1</Start>
        <Stop>1</Stop>
        <Step>0.01</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Random number greater than</Name>
    <Description>The condition is true if a random number between zero and 1 is greater than the value specified.</Description>
    <Category>Random Numbers</Category>
    <Init />
    <Body>if (rng.NextDouble() &gt; &lt;#Value&gt;)
</Body>
    <Plotting>Random rng = new Random();
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>9c128cc8-881e-435a-b98b-c594416bc506</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0.5</Value>
        <DefaultValue>0.5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>rnd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Random number less than</Name>
    <Description>The condition is true if a random number between zero and 1 is less than the value specified.</Description>
    <Category>Random Numbers</Category>
    <Init />
    <Body>if (rng.NextDouble() &lt; &lt;#Value&gt;)
</Body>
    <Plotting>Random rng = new Random();
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>9c128cc8-881e-435a-b98b-c594416bc506</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0.5</Value>
        <DefaultValue>0.5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>rnd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD Crosses above zero</Name>
    <Description>Occurs when the MACD indicator crosses above zero.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (CrossOver(bar, &lt;#macd&gt;, 0))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD Crosses below zero</Name>
    <Description>Occurs when the MACD indicator crosses below zero.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (CrossUnder(bar, &lt;#macd&gt;, 0))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD is above zero</Name>
    <Description>This rule is true whenever the MACD indicator is above zero.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (&lt;#macd&gt;[bar] &gt; 0)
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD is below zero</Name>
    <Description>This rule is true whenever the MACD indicator is below zero.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (&lt;#macd&gt;[bar] &lt; 0)
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD turns up</Name>
    <Description>Occurs when the MACD indicator turns up after a downward move.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (TurnUp(bar, &lt;#macd&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD turns down</Name>
    <Description>Occurs when the MACD indicator turns down after an upward move.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
      DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
      DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
    </Init>
    <Body>if (TurnDown(bar, &lt;#macd&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;,&lt;#macd&gt;,Color.Maroon,LineStyle.Solid,2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Date is before a Calendar Date</Name>
    <Description>Occurs when the date is before a specified calendar date (day/month).</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>DateTime &lt;#date&gt; = new DateTime(Bars.Date[bar].Year, &lt;#Month (1-12)&gt;, &lt;#Day (1-31)&gt;);
if (Bars.Date[bar] &lt; &lt;#date&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>5b70fa50-1640-4882-a4ec-2cc5f4b83cf7</ID>
    <Parameters>
      <RuleParameter>
        <Name>Day (1-31)</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>31</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Month (1-12)</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>12</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>date</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Date is after a Calendar Date</Name>
    <Description>Occurs when the date is after a specified calendar date (day/month).</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>DateTime &lt;#date&gt; = new DateTime(Bars.Date[bar].Year, &lt;#Month (1-12)&gt;, &lt;#Day (1-31)&gt;);
if (Bars.Date[bar] &gt; &lt;#date&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>5b70fa50-1640-4882-a4ec-2cc5f4b83cf7</ID>
    <Parameters>
      <RuleParameter>
        <Name>Day (1-31)</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>31</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Month (1-12)</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>12</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>date</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Date is a day of week</Name>
    <Description>Occurs when the date is a specified day of the week.</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>if (Date[bar].DayOfWeek == DayOfWeek.&lt;#Day of Week&gt;)</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>d98ef8ff-7f35-4e35-809d-5b424152c7a2</ID>
    <Parameters>
      <RuleParameter>
        <Name>Day of Week</Name>
        <Value>Monda</Value>
        <DefaultValue>Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Date is before day of week</Name>
    <Description>Occurs when the date is before a specified day of the week.</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>if (Date[bar].DayOfWeek &lt; DayOfWeek.&lt;#Day of Week&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>d98ef8ff-7f35-4e35-809d-5b424152c7a2</ID>
    <Parameters>
      <RuleParameter>
        <Name>Day of Week</Name>
        <Value>Monda</Value>
        <DefaultValue>Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Date is after day of week</Name>
    <Description>Occurs when the date is after a specified day of the week.</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>if (Date[bar].DayOfWeek &gt; DayOfWeek.&lt;#Day of Week&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>d98ef8ff-7f35-4e35-809d-5b424152c7a2</ID>
    <Parameters>
      <RuleParameter>
        <Name>Day of Week</Name>
        <Value>Monda</Value>
        <DefaultValue>Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at ATR Limit</Name>
    <Description>Attempts to buy next bar using a limit order.  The limit price is based on the current price minus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>BuyAtLimit(bar + 1, &lt;#Price&gt;[bar] - ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; - ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongEntry</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Buy at ATR Stop</Name>
    <Description>Attempts to buy next bar using a stop order.  The stop price is based on the current price plus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>BuyAtStop(bar + 1, &lt;#Price&gt;[bar] + ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; + ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongEntry</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at ATR Limit</Name>
    <Description>Attempts to short next bar using a limit order.  The limit price is based on the current price plus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>ShortAtLimit(bar + 1, &lt;#Price&gt;[bar] + ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; + ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortEntry</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short at ATR Stop</Name>
    <Description>Attempts to short next bar using a stop order.  The stop price is based on the current price minus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>ShortAtStop(bar + 1, &lt;#Price&gt;[bar] - ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; - ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortEntry</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at ATR Limit</Name>
    <Description>Attempts to sell the open long position next bar using a limit order.  The limit price is based on the current price plus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>SellAtLimit(bar + 1, p, &lt;#Price&gt;[bar] + ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; + ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Sell at ATR Stop</Name>
    <Description>Attempts to sell the open long position next bar using a stop order.  The stop price is based on the current price minus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>SellAtStop(bar + 1, p, &lt;#Price&gt;[bar] - ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; - ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at ATR Limit</Name>
    <Description>Attempts to cover the open short position next bar using a limit order.  The limit price is based on the current price minus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>CoverAtLimit(bar + 1, p, &lt;#Price&gt;[bar] - ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; - ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Cover at ATR Stop</Name>
    <Description>Attempts to cover the open short position next bar using a stop order.  The stop price is based on the current price plus a multiple of the Average True Range (ATR) indicator.</Description>
    <Category>Volatility (ATR) Entries and Exits</Category>
    <Init />
    <Body>CoverAtStop(bar + 1, p, &lt;#Price&gt;[bar] + ATR.Value(bar, Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;, &lt;#SignalName&gt;);
</Body>
    <Plotting>PlotSeries(PricePane, (&lt;#Price&gt; + ATR.Series(Bars, &lt;#ATR Period&gt;) * &lt;#ATR Multiplier&gt;) &gt;&gt; 1, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>03adeac4-4409-4f13-8d79-717dbf6c6dcc</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>ATR Multiplier</Name>
        <Value>1.0</Value>
        <DefaultValue>1.0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>10</Stop>
        <Step>0.5</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is above upper Moving Average Envelope</Name>
    <Description>Occurs when the specified Price is above the upper Moving Average envelope.</Description>
    <Category>Moving Average Envelopes</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d);
if (&lt;#Price&gt;[bar] &gt; &lt;#ma&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d), Color.Green, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>995fce21-ad41-4374-89b5-5c805f38de6b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Envelope Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is below lower Moving Average Envelope</Name>
    <Description>Occurs when the specified Price is below the lower Moving Average envelope.</Description>
    <Category>Moving Average Envelopes</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d);
if (&lt;#Price&gt;[bar] &lt; &lt;#ma&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d), Color.Green, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>995fce21-ad41-4374-89b5-5c805f38de6b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Envelope Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses above upper Moving Average Envelope</Name>
    <Description>Occurs when the specified Price crosses above the upper Moving Average envelope.</Description>
    <Category>Moving Average Envelopes</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d);
if (CrossOver(bar, &lt;#Price&gt;, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d), Color.Green, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>995fce21-ad41-4374-89b5-5c805f38de6b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Envelope Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses below upper Moving Average Envelope</Name>
    <Description>Occurs when the specified Price crosses below the upper Moving Average envelope.</Description>
    <Category>Moving Average Envelopes</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d);
if (CrossUnder(bar, &lt;#Price&gt;, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d), Color.Green, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>995fce21-ad41-4374-89b5-5c805f38de6b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Envelope Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses above lower Moving Average Envelope</Name>
    <Description>Occurs when the specified Price crosses above the lower Moving Average envelope.</Description>
    <Category>Moving Average Envelopes</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d);
if (CrossOver(bar, &lt;#Price&gt;, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d), Color.Green, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>995fce21-ad41-4374-89b5-5c805f38de6b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Envelope Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses below lower Moving Average Envelope</Name>
    <Description>Occurs when the specified Price crosses below the lower Moving Average envelope.</Description>
    <Category>Moving Average Envelopes</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d);
if (CrossUnder(bar, &lt;#Price&gt;, &lt;#ma&gt;))
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Envelope Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Envelope Percent&gt; / 100.0d), Color.Green, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>995fce21-ad41-4374-89b5-5c805f38de6b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Envelope Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>External Symbol Price is above a value</Name>
    <Description>Occurs when the price of a symbol that you specify is above a certain value.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (&lt;#external&gt;.&lt;#Symbol Price&gt;[bar] &gt; &lt;#Value&gt;)
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>External Symbol Price is below a value</Name>
    <Description>Occurs when the price of a symbol that you specify is below a certain value.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (&lt;#external&gt;.&lt;#Symbol Price&gt;[bar] &lt; &lt;#Value&gt;)
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>External Symbol Price crosses above a value</Name>
    <Description>Occurs when the price of a symbol that you specify crosses above a certain value.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (CrossOver(bar, &lt;#external&gt;.&lt;#Symbol Price&gt;, &lt;#Value&gt;))
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>External Symbol Price crosses below a value</Name>
    <Description>Occurs when the price of a symbol that you specify crosses below a certain value.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (CrossUnder(bar, &lt;#external&gt;.&lt;#Symbol Price&gt;, &lt;#Value&gt;))
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is above External Symbol Price</Name>
    <Description>Occurs when the price of the symbol being charted is above the price of another symbol that you specify.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (&lt;#Price&gt;[bar] &gt; &lt;#external&gt;.&lt;#Symbol Price&gt;[bar])
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is below External Symbol Price</Name>
    <Description>Occurs when the price of the symbol being charted is below the price of another symbol that you specify.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (&lt;#Price&gt;[bar] &lt; &lt;#external&gt;.&lt;#Symbol Price&gt;[bar])
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses above External Symbol Price</Name>
    <Description>Occurs when the price of the symbol being charted crosses above the price of another symbol that you specify.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (CrossOver(bar, &lt;#Price&gt;, &lt;#external&gt;.&lt;#Symbol Price&gt;))
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses below External Symbol Price</Name>
    <Description>Occurs when the price of the symbol being charted crosses below the price of another symbol that you specify.</Description>
    <Category>External Symbol</Category>
    <Init>Bars &lt;#external&gt; = GetExternalSymbol(&lt;#Symbol&gt;, true);
</Init>
    <Body>if (CrossUnder(bar, &lt;#Price&gt;, &lt;#external&gt;.&lt;#Symbol Price&gt;))
</Body>
    <Plotting>PlotSymbol(&lt;#NewPane&gt;, GetExternalSymbol("&lt;#Symbol&gt;", true), Color.Black, Color.Black);</Plotting>
    <RuleType>Condition</RuleType>
    <ID>67435eaf-7937-4719-9f4c-2605c237d103</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol</Name>
        <Value>.DJI</Value>
        <DefaultValue>.DJI</DefaultValue>
        <ParamType>String</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Symbol Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>external</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Number of open Positions is greater than a value</Name>
    <Description>Occurs when the number of open Positions is greater than a value that you specify.</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>if (ActivePositions.Count &gt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>84a51a5e-7291-4e3e-b741-f8c2eecb8f7b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>0</Start>
        <Stop>20</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Number of open Positions is less than a value</Name>
    <Description>Occurs when the number of open Positions is less than a value that you specify.</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>if (ActivePositions.Count &lt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>84a51a5e-7291-4e3e-b741-f8c2eecb8f7b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>0</Start>
        <Stop>20</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Number of open Positions is equal to a value</Name>
    <Description>Occurs when the number of open Positions is greater than a value that you specify.</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>if (ActivePositions.Count == &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>84a51a5e-7291-4e3e-b741-f8c2eecb8f7b</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>0</Start>
        <Stop>20</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Current open Position is profitable</Name>
    <Description>This rule is true when the most recent open Position is profitable.</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>
      if (LastActivePosition != null &amp;&amp; LastActivePosition.Active)
      if (LastActivePosition.NetProfitAsOfBar(bar) &gt; 0)</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>87eb8f65-2230-4b96-8589-d714b3c8fbad</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Current open Position is unprofitable</Name>
    <Description>This rule is true when the most recent open Position is unprofitable.</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>
      if (LastActivePosition != null &amp;&amp; LastActivePosition.Active)
      if (LastActivePosition.NetProfitAsOfBar(bar) &lt;= 0)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>87eb8f65-2230-4b96-8589-d714b3c8fbad</ID>
    <Parameters />
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Current open Position is older than a number of bars</Name>
    <Description>This rule is true when the most recent open Position is older than a number of Bars that you specify,</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>
      if (LastActivePosition != null &amp;&amp; LastActivePosition.Active)
      if (bar - LastActivePosition.EntryBar &gt;= &lt;#Number of Bars&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>87eb8f65-2230-4b96-8589-d714b3c8fbad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Number of Bars</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>252</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Current open Position is not older than a number of bars</Name>
    <Description>This rule is true when the most recent open Position is not older than a number of Bars that you specify,</Description>
    <Category>Position-Based</Category>
    <Init />
    <Body>
      if (LastActivePosition != null &amp;&amp; LastActivePosition.Active)
      if (bar - LastActivePosition.EntryBar &lt; &lt;#Number of Bars&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>87eb8f65-2230-4b96-8589-d714b3c8fbad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Number of Bars</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>252</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price turns up</Name>
    <Description>Occurs when price (or volume) turns up after moving downward.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (TurnUp(bar, &lt;#Price&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price turns down</Name>
    <Description>Occurs when price (or volume) turns down after moving upward.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (TurnDown(bar, &lt;#Price&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price &lt;= Lowest Price in look back period</Name>
    <Description />
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (ROC.GetSeriesValue(bar,&lt;#Price1&gt;)&lt;=Lowest.Value(bar,&lt;#Price2&gt;,&lt;#Lookback Period&gt;))</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>8d75ce56-c892-4e01-b42b-3f4655b243f9</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price1</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Price2</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>2</Value>
        <DefaultValue>2</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price &gt;= Highest Price in look back period</Name>
    <Description />
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>
      if (ROC.GetSeriesValue(bar,&lt;#Price1&gt;)&gt;=Highest.Value(bar,&lt;#Price2&gt;,&lt;#Lookback Period&gt;))
    </Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>8d75ce56-c892-4e01-b42b-3f4655b243f9</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price1</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Price2</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>2</Value>
        <DefaultValue>2</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses above Price from previous day</Name>
    <Description />
    <Category>Price (or Volume) Action</Category>
    <Init>DataSeries &lt;#Shifted&gt; = &lt;#Price2&gt; &gt;&gt; &lt;#Previous Days&gt;;
</Init>
    <Body>      if (CrossOver(bar,&lt;#Price1&gt;, &lt;#Shifted&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>3f4257d0-4d43-4ea2-8cf3-e86cf2d23413</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price1</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Price2</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Previous Days</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>1</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Shifted</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price crosses below Price from previous day</Name>
    <Description />
    <Category>Price (or Volume) Action</Category>
    <Init>DataSeries &lt;#Shifted&gt; = &lt;#Price2&gt; &gt;&gt; &lt;#Previous Days&gt;;
</Init>
    <Body>      if (CrossUnder(bar,&lt;#Price1&gt;, &lt;#Shifted&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>3f4257d0-4d43-4ea2-8cf3-e86cf2d23413</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price1</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Price2</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Previous Days</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>1</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Shifted</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Average Daily Volume greater than</Name>
    <Description>Enter the volume value to compare. Enter the period for the Average Daily Volume moving average</Description>
    <Category>Price (or Volume) Action</Category>
    <Init>
      DataSeries &lt;#SMAGreaterThan&gt; = SMA.Series(Volume,&lt;#Period&gt;);
    </Init>
    <Body>
      if(SMAGreaterThan[bar]&gt;&lt;#Value&gt;)
    </Body>
    <Plotting>
      PlotSeries(VolumePane, &lt;#SMAGreaterThan&gt;, Color.Red, LineStyle.Solid, 2 );
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>2ec5adcc-6f66-4fb8-8442-f3af81260619</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>1</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Period</Name>
        <Value>120</Value>
        <DefaultValue>120</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>1</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>SMAGreaterThan</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Average Daily Volume less than</Name>
    <Description>Enter the volume value to compare. Enter the period for the Average Daily Volume moving average</Description>
    <Category>Price (or Volume) Action</Category>
    <Init>
      DataSeries &lt;#SMALessThan&gt; = SMA.Series(Volume,&lt;#Period&gt;);
    </Init>
    <Body>
      if(SMALessThan[bar]&lt;&lt;#Value&gt;)
    </Body>
    <Plotting>
      PlotSeries(VolumePane, &lt;#SMALessThan&gt;, Color.Red, LineStyle.Solid, 2 );
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>2ec5adcc-6f66-4fb8-8442-f3af81260619</ID>
    <Parameters>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>1</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Period</Name>
        <Value>120</Value>
        <DefaultValue>120</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>1</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>SMALessThan</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Volume is &lt;X% below SMA</Name>
    <Description>Volume is lower than x% below the average volume</Description>
    <Category>Price (or Volume) Action</Category>
    <Init>
      DataSeries &lt;#SMAVolumeLess&gt; = SMA.Series(Volume,&lt;#Period&gt;);
      &lt;#SMAVolumeLess&gt;.Description = "SMA(#Volume, "+&lt;#Period&gt;.ToString()+")";
      DataSeries &lt;#SMAVolumeLessPct&gt; = &lt;#SMAVolumeLess&gt; * (1 - &lt;#Percent&gt;/100d);
      &lt;#SMAVolumeLessPct&gt;.Description = "SMA(#Volume, "+&lt;#Period&gt;.ToString()+")-" + &lt;#Percent&gt;.ToString() +"%";
    </Init>
    <Body>
      if( Volume[bar]&lt; SMAVolumeLessPct[bar])
    </Body>
    <Plotting>
      PlotSeries(VolumePane, &lt;#SMAVolumeLess&gt;, Color.Red, LineStyle.Solid, 2 );
      PlotSeries(VolumePane, &lt;#SMAVolumeLessPct&gt;, Color.Red, LineStyle.Dotted, 2 );
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>71959a98-f697-4481-88bd-9ea5830beebb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>SMAVolumeLess</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>SMAVolumeLessPct</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Volume is &gt;X% above SMA</Name>
    <Description>Volume is higher than x% above the average volume</Description>
    <Category>Price (or Volume) Action</Category>
    <Init>
      DataSeries &lt;#SMAVolumeGreater&gt; = SMA.Series(Volume,&lt;#Period&gt;);
      &lt;#SMAVolumeGreater&gt;.Description = "SMA(#Volume, "+&lt;#Period&gt;.ToString()+")";

      DataSeries &lt;#SMAVolumeGreaterPct&gt; = &lt;#SMAVolumeGreater&gt; * (1 + &lt;#Percent&gt;/100d);
      &lt;#SMAVolumeGreaterPct&gt;.Description = "SMA(#Volume, "+&lt;#Period&gt;.ToString()+")+" + &lt;#Percent&gt;.ToString() +"%";
    </Init>
    <Body>
      if( Volume[bar]&gt; SMAVolumeGreaterPct[bar])
    </Body>
    <Plotting>
      PlotSeries(VolumePane, &lt;#SMAVolumeGreater&gt;, Color.Red, LineStyle.Solid, 2 );
      PlotSeries(VolumePane, &lt;#SMAVolumeGreaterPct&gt;, Color.Red, LineStyle.Dotted, 2 );
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>71959a98-f697-4481-88bd-9ea5830beebb</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>SMAVolumeGreater</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>SMAVolumeGreaterPct</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator makes a new high within period</Name>
    <Description>This rule is true when the indicator makes a new high within the specified period.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] == Highest.Value(bar, &lt;#Indicator&gt;, &lt;#Period&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>15a2bbdf-54ee-4e9d-989d-51485eab0c11</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator makes a new low within period</Name>
    <Description>This rule is true when the indicator makes a new low within the specified period.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] == Lowest.Value(bar, &lt;#Indicator&gt;, &lt;#Period&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>15a2bbdf-54ee-4e9d-989d-51485eab0c11</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price increases a consecutive number of bars</Name>
    <Description>Occurs when the price (or volume) has increased consecutively by the number of bars that you specify.  Change the Lookback Period to compare each price to a price further back in history.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (CumUp.Value(bar, &lt;#Price&gt;, &lt;#Lookback Period&gt;) &gt;= &lt;#Number of Bars&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>6536c71f-7c40-4916-aeb3-cb602a0f36ca</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Number of Bars</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price decreases a consecutive number of bars</Name>
    <Description>Occurs when the price (or volume) has decreased consecutively by the number of bars that you specify.  Change the Lookback Period to compare each price to a price further back in history.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (CumDown.Value(bar, &lt;#Price&gt;, &lt;#Lookback Period&gt;) &gt;= &lt;#Number of Bars&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>6536c71f-7c40-4916-aeb3-cb602a0f36ca</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Number of Bars</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator increases a consecutive number of bars</Name>
    <Description>Occurs when the indicator has increased consecutively by the number of bars that you specify.  Change the Lookback Period to compare each indicator value to a value further back in history.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CumUp.Value(bar, &lt;#Indicator&gt;, &lt;#Lookback Period&gt;) &gt;= &lt;#Number of Bars&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>6ca15079-8bbe-402d-a9c7-3e60ccfc919a</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Number of Bars</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>20</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator decreases a consecutive number of bars</Name>
    <Description>Occurs when the indicator has decreased consecutively by the number of bars that you specify.  Change the Lookback Period to compare each indicator value to a value further back in history.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (CumDown.Value(bar, &lt;#Indicator&gt;, &lt;#Lookback Period&gt;) &gt;= &lt;#Number of Bars&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>6ca15079-8bbe-402d-a9c7-3e60ccfc919a</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Number of Bars</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>20</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>1</Value>
        <DefaultValue>1</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is above a value</Name>
    <Description>Occurs when price (or volume) is above a value that you specify.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (&lt;#Price&gt;[bar] &gt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is below a value</Name>
    <Description>Occurs when price (or volume) is below a value that you specify.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (&lt;#Price&gt;[bar] &lt; &lt;#Value&gt;)
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price makes a new high within period</Name>
    <Description>Occurs when price (or volume) makes a new high within the specified period.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (&lt;#Price&gt;[bar] == Highest.Value(bar, &lt;#Price&gt;, &lt;#Period&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price makes a new low within period</Name>
    <Description>Occurs when price (or volume) makes a new low within the specified period.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (&lt;#Price&gt;[bar] == Lowest.Value(bar, &lt;#Price&gt;, &lt;#Period&gt;))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is above its value a number of bars ago</Name>
    <Description>This rule is true when the indicator is higher than it was a certain number of bars ago.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] &gt; &lt;#Indicator&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>1fdd53a9-faa7-41b1-8351-17e941541557</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator is below its value a number of bars ago</Name>
    <Description>This rule is true when the indicator is lower than it was a certain number of bars ago.</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>if (&lt;#Indicator&gt;[bar] &lt; &lt;#Indicator&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>1fdd53a9-faa7-41b1-8351-17e941541557</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is higher than it was a number of bars ago</Name>
    <Description>Occurs when price (or volume) is higher than it was a certain number of bars ago.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (&lt;#Price&gt;[bar] &gt; &lt;#Price&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>196c8f0f-5775-443d-9b0a-5bb5d66b4861</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is lower than it was a number of bars ago</Name>
    <Description>Occurs when price (or volume) is lower than it was a certain number of bars ago.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init />
    <Body>if (&lt;#Price&gt;[bar] &lt; &lt;#Price&gt;[bar - &lt;#Lookback Period&gt;])
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>196c8f0f-5775-443d-9b0a-5bb5d66b4861</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Lookback Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables />
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K is above %D</Name>
    <Description>Occurs when the Stochastic %K indicator is above the Stochastic %D indicator.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);
DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (&lt;#stochk&gt;[bar] &gt; &lt;#stochd&gt;[bar])
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K is below %D</Name>
    <Description>Occurs when the Stochastic %K indicator is below the Stochastic %D indicator.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);
DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (&lt;#stochk&gt;[bar] &lt; &lt;#stochd&gt;[bar])
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K crosses above %D</Name>
    <Description>Occurs when the Stochastic %K indicator crosses above the Stochastic %D indicator.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);
DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (CrossOver(bar, &lt;#stochk&gt;, &lt;#stochd&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K crosses below %D</Name>
    <Description>Occurs when the Stochastic %K indicator crosses below the Stochastic %D indicator.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);
DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (CrossUnder(bar, &lt;#stochk&gt;, &lt;#stochd&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K crosses above overbought level</Name>
    <Description>Occurs when the Stochastic %K crosses above the overbought level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);</Init>
    <Body>if (CrossOver(bar, &lt;#stochk&gt;, &lt;#Overbought Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Overbought Level&gt;, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>80</Value>
        <DefaultValue>80</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K crosses above oversold level</Name>
    <Description>Occurs when the Stochastic %K crosses above the oversold level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);</Init>
    <Body>if (CrossOver(bar, &lt;#stochk&gt;, &lt;#Oversold Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Oversold Level&gt;, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K crosses below overbought level</Name>
    <Description>Occurs when the Stochastic %K crosses below the overbought level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);</Init>
    <Body>if (CrossUnder(bar, &lt;#stochk&gt;, &lt;#Overbought Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Overbought Level&gt;, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>80</Value>
        <DefaultValue>80</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K crosses below oversold level</Name>
    <Description>Occurs when the Stochastic %K crosses below the oversold level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);</Init>
    <Body>if (CrossUnder(bar, &lt;#stochk&gt;, &lt;#Oversold Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Oversold Level&gt;, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K is overbought</Name>
    <Description>Occurs when the Stochastic %K is above the overbought level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);</Init>
    <Body>if (&lt;#stochk&gt;[bar] &gt; &lt;#Overbought Level&gt;)
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Overbought Level&gt;, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>80</Value>
        <DefaultValue>80</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %K is oversold</Name>
    <Description>Occurs when the Stochastic %K is below the oversold level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochk&gt; = StochK.Series(Bars, &lt;#StochK Period&gt;);</Init>
    <Body>if (&lt;#stochk&gt;[bar] &lt; &lt;#Oversold Level&gt;)
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochk&gt;, Color.Purple, LineStyle.Solid, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Oversold Level&gt;, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochK Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochk</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %D crosses above overbought level</Name>
    <Description>Occurs when the Stochastic %D crosses above the overbought level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);
</Init>
    <Body>if (CrossOver(bar, &lt;#stochd&gt;, &lt;#Overbought Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Overbought Level&gt;, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>80</Value>
        <DefaultValue>80</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %D crosses above oversold level</Name>
    <Description>Occurs when the Stochastic %D crosses above the oversold level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (CrossOver(bar, &lt;#stochd&gt;, &lt;#Oversold Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Oversold Level&gt;, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %D crosses below overbought level</Name>
    <Description>Occurs when the Stochastic %D crosses below the overbought level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (CrossUnder(bar, &lt;#stochd&gt;, &lt;#Overbought Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Overbought Level&gt;, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>80</Value>
        <DefaultValue>80</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %D crosses below oversold level</Name>
    <Description>Occurs when the Stochastic %D crosses below the oversold level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (CrossUnder(bar, &lt;#stochd&gt;, &lt;#Oversold Level&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Oversold Level&gt;, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %D is overbought</Name>
    <Description>Occurs when the Stochastic %D is above the overbought level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (&lt;#stochd&gt;[bar] &gt; &lt;#Overbought Level&gt;)
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Overbought Level&gt;, Color.Red, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>80</Value>
        <DefaultValue>80</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stochastic %D is oversold</Name>
    <Description>Occurs when the Stochastic %D is below the oversold level.</Description>
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#stochd&gt; = StochD.Series(Bars, &lt;#StochD Period&gt;, &lt;#StochD Smoothing&gt;);</Init>
    <Body>if (&lt;#stochd&gt;[bar] &lt; &lt;#Oversold Level&gt;)
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:Stoch&gt;, &lt;#stochd&gt;, Color.Black, LineStyle.Dotted, 2);
DrawHorzLine(&lt;#NewPane:Stoch&gt;, &lt;#Oversold Level&gt;, Color.Green, LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>54ba7a73-6838-4800-aa39-b60f5884a1a5</ID>
    <Parameters>
      <RuleParameter>
        <Name>StochD Period</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>StochD Smoothing</Name>
        <Value>3</Value>
        <DefaultValue>3</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>50</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>stochd</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stoch RSI crosses above overbought level</Name>
    <Description />
    <Category>Stochastics</Category>
    <Init>
      DataSeries &lt;#RSIAboveOverbought&gt; = StochRSI.Series(&lt;#Series&gt;, &lt;#Period&gt;);
    </Init>
    <Body>
      if(CrossOver(bar,RSIAboveOverbought,&lt;#Overbought Level&gt;))
    </Body>
    <Plotting>
      PlotSeries(&lt;#NewPane&gt;, &lt;#RSIAboveOverbought&gt;, Color.Red, LineStyle.Solid, 2,&lt;#RSIAboveOverbought&gt;.Description );
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Overbought Level&gt;, Color.Silver, LineStyle.Dotted, 1);
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Oversold Level&gt;, Color.Silver, LineStyle.Dotted, 1);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>1e8728b8-d59f-489e-85c7-841439cca140</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>14</Value>
        <DefaultValue>14</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Series</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>70</Value>
        <DefaultValue>70</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>30</Value>
        <DefaultValue>30</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>RSIAboveOverbought</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stoch RSI crosses above oversold level</Name>
    <Description />
    <Category>Stochastics</Category>
    <Init>
      DataSeries &lt;#RSIAboveOverSold&gt; = StochRSI.Series(&lt;#Series&gt;, &lt;#Period&gt;);
    </Init>
    <Body>
      if(CrossOver(bar,RSIAboveOverSold,&lt;#Oversold Level&gt;))
    </Body>
    <Plotting>
      PlotSeries(&lt;#NewPane&gt;, &lt;#RSIAboveOverSold&gt;, Color.Red, LineStyle.Solid, 2,&lt;#RSIAboveOverSold&gt;.Description );
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Overbought Level&gt;, Color.Silver, LineStyle.Dotted, 1);
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Oversold Level&gt;, Color.Silver, LineStyle.Dotted, 1);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>1e8728b8-d59f-489e-85c7-841439cca140</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>14</Value>
        <DefaultValue>14</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Series</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>70</Value>
        <DefaultValue>70</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>30</Value>
        <DefaultValue>30</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>RSIAboveOverSold</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stoch RSI crosses below overbought level</Name>
    <Description />
    <Category>Stochastics</Category>
    <Init>
      DataSeries &lt;#RSIBelowOverbought&gt; = StochRSI.Series(&lt;#Series&gt;, &lt;#Period&gt;);
    </Init>
    <Body>
      if(CrossUnder(bar,RSIBelowOverbought,&lt;#Overbought Level&gt;))
    </Body>
    <Plotting>
      PlotSeries(&lt;#NewPane&gt;, &lt;#RSIBelowOverbought&gt;, Color.Red, LineStyle.Solid, 2,&lt;#RSIBelowOverbought&gt;.Description );
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Overbought Level&gt;, Color.Silver, LineStyle.Dotted, 1);
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Oversold Level&gt;, Color.Silver, LineStyle.Dotted, 1);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>1e8728b8-d59f-489e-85c7-841439cca140</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>14</Value>
        <DefaultValue>14</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Series</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>70</Value>
        <DefaultValue>70</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>30</Value>
        <DefaultValue>30</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>RSIBelowOverbought</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stoch RSI crosses below oversold level</Name>
    <Description />
    <Category>Stochastics</Category>
    <Init>DataSeries &lt;#RSIBelowOverSold&gt; = StochRSI.Series(&lt;#Series&gt;, &lt;#Period&gt;);</Init>
    <Body>
      if(CrossUnder(bar,RSIBelowOverSold,&lt;#Oversold Level&gt;))
    </Body>
    <Plotting>
      PlotSeries(&lt;#NewPane&gt;, &lt;#RSIBelowOverSold&gt;, Color.Red, LineStyle.Solid, 2,&lt;#RSIBelowOverSold&gt;.Description );
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Overbought Level&gt;, Color.Silver, LineStyle.Dotted, 1);
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Oversold Level&gt;, Color.Silver, LineStyle.Dotted, 1);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>1e8728b8-d59f-489e-85c7-841439cca140</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>14</Value>
        <DefaultValue>14</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Series</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>70</Value>
        <DefaultValue>70</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>30</Value>
        <DefaultValue>30</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>RSIBelowOverSold</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stoch RSI is overbought</Name>
    <Description />
    <Category>Stochastics</Category>
    <Init>
      DataSeries &lt;#RSIOverBought&gt; = StochRSI.Series(&lt;#Series&gt;, &lt;#Period&gt;);
    </Init>
    <Body>
      if(RSIOverBought[bar]&gt;&lt;#Overbought Level&gt;)
    </Body>
    <Plotting>
      PlotSeries(&lt;#NewPane&gt;, &lt;#RSIOverBought&gt;, Color.Red, LineStyle.Solid, 2,&lt;#RSIOverBought&gt;.Description );
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Overbought Level&gt;, Color.Silver, LineStyle.Dotted, 1);
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Oversold Level&gt;, Color.Silver, LineStyle.Dotted, 1);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>1e8728b8-d59f-489e-85c7-841439cca140</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>14</Value>
        <DefaultValue>14</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Series</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>70</Value>
        <DefaultValue>70</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>30</Value>
        <DefaultValue>30</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>RSIOverBought</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Stoch RSI is oversold</Name>
    <Description />
    <Category>Stochastics</Category>
    <Init>
      DataSeries &lt;#RSIOverSold&gt; = StochRSI.Series(&lt;#Series&gt;, &lt;#Period&gt;);
    </Init>
    <Body>
      if(RSIOverSold[bar]&lt;&lt;#Oversold Level&gt;)
    </Body>
    <Plotting>
      PlotSeries(&lt;#NewPane&gt;, &lt;#RSIOverSold&gt;, Color.Red, LineStyle.Solid, 2,&lt;#RSIOverSold&gt;.Description );
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Overbought Level&gt;, Color.Silver, LineStyle.Dotted, 1);
      DrawHorzLine(&lt;#NewPane&gt;, &lt;#Oversold Level&gt;, Color.Silver, LineStyle.Dotted, 1);
    </Plotting>
    <RuleType>Condition</RuleType>
    <ID>1e8728b8-d59f-489e-85c7-841439cca140</ID>
    <Parameters>
      <RuleParameter>
        <Name>Period</Name>
        <Value>14</Value>
        <DefaultValue>14</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Series</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Overbought Level</Name>
        <Value>70</Value>
        <DefaultValue>70</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Oversold Level</Name>
        <Value>30</Value>
        <DefaultValue>30</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>RSIOverSold</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Price is above a value (backtest)</Name>
    <Description>Occurs when price (or volume) is above a value that you specify, but measures price at pre-split levels so that price filters are actually valid for backtesting.  This rule can be applied to both backtesting and live trading.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init>DataSeries &lt;#reverseAdjustment&gt;;
DataSeriesOp.SplitReverseFactor( this, "&lt;#Split Item&gt;", out &lt;#reverseAdjustment&gt;);
DataSeries &lt;#dsAdjusted&gt; = &lt;#Price&gt; * &lt;#reverseAdjustment&gt;;
ChartPane &lt;#adjPane&gt; = PricePane;
if( &lt;#Price&gt;.Description.Contains("Volume") ) {
	&lt;#dsAdjusted&gt; = &lt;#Price&gt; / &lt;#reverseAdjustment&gt;;
	&lt;#adjPane&gt; = VolumePane;
}
</Init>
    <Body>if (&lt;#dsAdjusted&gt;[bar] &gt; &lt;#Value&gt;)
</Body>
    <Plotting>if( &lt;#Plot Adjusted Series&gt; )
	PlotSeries(&lt;#adjPane&gt;, &lt;#dsAdjusted&gt;, Color.Blue, WealthLab.LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Split Item</Name>
        <Value>spli</Value>
        <DefaultValue>split;Split (Yahoo! Finance);Split (MSN)</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Plot Adjusted Series</Name>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <ParamType>Boolean</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>reverseAdjustment</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>dsAdjusted</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>adjPane</Name>
      </RuleVariable>
    </Variables>
    <UsingClause>WealthLab.Rules;</UsingClause>
  </Rule>
  <Rule>
    <Name>Price is below a value (backtest)</Name>
    <Description>Occurs when price (or volume) is below a value that you specify, but measures price at pre-split levels so that price filters are actually valid for backtesting.  This rule can be applied to both backtesting and live trading.</Description>
    <Category>Price (or Volume) Action</Category>
    <Init>DataSeries &lt;#reverseAdjustment&gt;;
DataSeriesOp.SplitReverseFactor( this, "&lt;#Split Item&gt;", out &lt;#reverseAdjustment&gt;);
DataSeries &lt;#dsAdjusted&gt; = &lt;#Price&gt; * &lt;#reverseAdjustment&gt;;
ChartPane &lt;#adjPane&gt; = PricePane;
if( &lt;#Price&gt;.Description.Contains("Volume") ) {
	&lt;#dsAdjusted&gt; = &lt;#Price&gt; / &lt;#reverseAdjustment&gt;;
	&lt;#adjPane&gt; = VolumePane;
}
</Init>
    <Body>if (&lt;#dsAdjusted&gt;[bar] &lt; &lt;#Value&gt;)
</Body>
    <Plotting>if( &lt;#Plot Adjusted Series&gt; )
	PlotSeries(&lt;#adjPane&gt;, &lt;#dsAdjusted&gt;, Color.Blue, WealthLab.LineStyle.Solid, 1);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>fec103e7-9163-451b-b74d-a88ef21b3e50</ID>
    <Parameters>
      <RuleParameter>
        <Name>Price</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>10</Value>
        <DefaultValue>10</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Split Item</Name>
        <Value>spli</Value>
        <DefaultValue>split;Split (Yahoo! Finance);Split (MSN)</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Plot Adjusted Series</Name>
        <Value>false</Value>
        <DefaultValue>false</DefaultValue>
        <ParamType>Boolean</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>reverseAdjustment</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>dsAdjusted</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>adjPane</Name>
      </RuleVariable>
    </Variables>
    <UsingClause>WealthLab.Rules;</UsingClause>
  </Rule>
  <Rule>
    <Name>MACD Histogram crosses above a Value</Name>
    <Description>Occurs when the MACD histogram crosses above the specified Value.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
</Init>
    <Body>if (CrossOver(bar, &lt;#hist&gt;, &lt;#Value&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#macd&gt;, Color.Maroon, LineStyle.Solid, 2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>-10</Start>
        <Stop>10</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>MACD Histogram crosses below a Value</Name>
    <Description>Occurs when the MACD histogram crosses below the specified Value.</Description>
    <Category>MACD (Moving Average Convergence/Divergence)</Category>
    <Init>DataSeries &lt;#macd&gt; = MACD.Series(&lt;#Source&gt;);
DataSeries &lt;#signal&gt; = EMA.Series(&lt;#macd&gt;, &lt;#Signal Period&gt;, EMACalculation.Modern);
DataSeries &lt;#hist&gt; = &lt;#macd&gt; - &lt;#signal&gt;;
</Init>
    <Body>if (CrossUnder(bar, &lt;#hist&gt;, &lt;#Value&gt;))
</Body>
    <Plotting>PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#macd&gt;, Color.Maroon, LineStyle.Solid, 2);
      PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#signal&gt;, Color.Black, LineStyle.Solid, 1);
PlotSeries(&lt;#NewPane:MACD&gt;, &lt;#hist&gt;, Color.Black, LineStyle.Histogram, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>f7af76e0-e0e1-4b99-a450-f9b69f090f33</ID>
    <Parameters>
      <RuleParameter>
        <Name>Source</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Signal Period</Name>
        <Value>9</Value>
        <DefaultValue>9</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Value</Name>
        <Value>0</Value>
        <DefaultValue>0</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>-10</Start>
        <Stop>10</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>macd</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>signal</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>hist</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Long Exit at Profit Target with fixed Stop + Trailing Stop</Name>
    <Description>Profit Pct: Percentage profit target from entry price.
Stop Pct: Percentage stop loss, e.g., 2 = 2% loss.
Trail Stop Trigger Pct: Percent profit on a MFE basis required to trigger the trailing stop.
Trail Stop Pct: Percentage of profit below most-favorable closing price; e.g., 40 protects 60% of the profit.</Description>
    <Category>Bracketed Exits</Category>
    <Init />
    <Body>bool &lt;#Stopped&gt;;
if(p.MFEAsOfBarPercent(bar) &gt;= &lt;#Trail Stop Trigger Pct&gt; )
{
    double &lt;#profit&gt; = Close[bar] - p.EntryPrice;
    &lt;#profit&gt; = Close[bar] - &lt;#profit&gt; * ( &lt;#Trail Stop Pct&gt; / 100.0d );
    &lt;#Stopped&gt; = SellAtTrailingStop( bar + 1, p, &lt;#profit&gt;, "Trailing Stop");
}
else
{
    //{ Dotted line indicates trailing stop trigger level }
    double &lt;#TStopTrigger&gt; = p.EntryPrice * ( 1 + &lt;#Trail Stop Trigger Pct&gt;/100.0d );
    DrawLine(PricePane, bar - 1, &lt;#TStopTrigger&gt;, bar, &lt;#TStopTrigger&gt;, Color.Gray, LineStyle.Dotted, 0 );
    double &lt;#StopPrice&gt; = p.EntryPrice * ( 1 - &lt;#Stop Pct&gt;/100.0d );
    &lt;#Stopped&gt; = SellAtStop( bar + 1, p, &lt;#StopPrice&gt;, "Stop Loss");
}
if(!&lt;#Stopped&gt;)
{
    double &lt;#ProfitTgt&gt; = p.EntryPrice * ( 1 + &lt;#Profit Pct&gt;/100.0d );
    SellAtLimit( bar + 1, p, &lt;#ProfitTgt&gt;, "Profit Target");
}
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>0ecaee2c-5328-4cfc-b213-dff00e80d0ad</ID>
    <Parameters>
      <RuleParameter>
        <Name>Profit Pct</Name>
        <Value>8</Value>
        <DefaultValue>8</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Stop Pct</Name>
        <Value>2</Value>
        <DefaultValue>2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Trail Stop Trigger Pct</Name>
        <Value>4</Value>
        <DefaultValue>4</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Trail Stop Pct</Name>
        <Value>40</Value>
        <DefaultValue>40</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Stopped</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>profit</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>TStopTrigger</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>ProfitTgt</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>StopPrice</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Long Exit at Profit Target with fixed Stop Loss</Name>
    <Description>Profit Pct: Percentage profit target from entry price
Stop Pct: Percentage stop loss; e.g., 2 = 2% stop loss</Description>
    <Category>Bracketed Exits</Category>
    <Init />
    <Body>double &lt;#ProfitTgt&gt; = p.EntryPrice * ( 1 + &lt;#Profit Pct&gt;/100.0d );
double &lt;#StopPrice&gt; = p.EntryPrice * ( 1 - &lt;#Stop Pct&gt;/100.0d );
if(!SellAtStop(bar + 1, p, &lt;#StopPrice&gt;, "Stop Loss"))
    SellAtLimit(bar + 1, p, &lt;#ProfitTgt&gt;, "Profit Target");
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>LongExit</RuleType>
    <ID>ada01ea4-8605-4bb0-b3fd-9b3a91104553</ID>
    <Parameters>
      <RuleParameter>
        <Name>Profit Pct</Name>
        <Value>8</Value>
        <DefaultValue>8</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Stop Pct</Name>
        <Value>2</Value>
        <DefaultValue>2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ProfitTgt</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>StopPrice</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short Exit at Profit Target with fixed Stop + Trailing Stop</Name>
    <Description>Profit Pct: Percentage profit target from entry price.
Stop Pct: Percentage stop loss, e.g., 2 = 2% loss.
Trail Stop Trigger Pct: Percent profit on a MFE basis required to trigger the trailing stop.
Trail Stop Pct: Percentage of profit below most-favorable closing price; e.g., enter 40 to protect 60% of the profit.</Description>
    <Category>Bracketed Exits</Category>
    <Init />
    <Body>bool &lt;#Stopped&gt;;
if(p.MFEAsOfBarPercent(bar) &gt;= &lt;#Trail Stop Trigger Pct&gt;)
{
    double &lt;#profit&gt; = p.EntryPrice - Close[bar];
    &lt;#profit&gt; = Close[bar] + &lt;#profit&gt; * ( &lt;#Trail Stop Pct&gt; / 100.0d );
    &lt;#Stopped&gt; = CoverAtTrailingStop( bar + 1, p, &lt;#profit&gt;, "Trailing Stop" );
}
else
{
    //{ Dotted line indicates trailing stop trigger level }
    double &lt;#TStopTrigger&gt; = p.EntryPrice * ( 1 - &lt;#Trail Stop Trigger Pct&gt;/100.0d );
    DrawLine(PricePane, bar - 1, &lt;#TStopTrigger&gt;, bar, &lt;#TStopTrigger&gt;, Color.Gray, LineStyle.Dotted, 0 );
    double &lt;#StopPrice&gt; = p.EntryPrice * ( 1 + &lt;#Stop Pct&gt;/100.0d );
    &lt;#Stopped&gt; = CoverAtStop( bar + 1, p, &lt;#StopPrice&gt;, "Stop Loss");
}
if(!&lt;#Stopped&gt;)
{
    double &lt;#ProfitTgt&gt; = p.EntryPrice * ( 1 - &lt;#Profit Pct&gt;/100.0d );
    CoverAtLimit( bar + 1, p, &lt;#ProfitTgt&gt;, "Profit Target");
}
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>8ed96317-0b96-491e-aa0a-dbfbe094d7aa</ID>
    <Parameters>
      <RuleParameter>
        <Name>Profit Pct</Name>
        <Value>8</Value>
        <DefaultValue>8</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Stop Pct</Name>
        <Value>2</Value>
        <DefaultValue>2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Trail Stop Trigger Pct</Name>
        <Value>4</Value>
        <DefaultValue>4</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Trail Stop Pct</Name>
        <Value>40</Value>
        <DefaultValue>40</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>Stopped</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>profit</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>TStopTrigger</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>ProfitTgt</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>StopPrice</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Short Exit at Profit Target with fixed Stop Loss</Name>
    <Description>Profit Pct: Percentage profit target from entry price
Stop Pct: Percentage stop loss; e.g., 2 = 2% stop loss</Description>
    <Category>Bracketed Exits</Category>
    <Init />
    <Body>double &lt;#ProfitTgt&gt; = p.EntryPrice * ( 1 - &lt;#Profit Pct&gt;/100.0d );
double &lt;#StopPrice&gt; = p.EntryPrice * ( 1 + &lt;#Stop Pct&gt;/100.0d );
if(!CoverAtStop(bar + 1, p, &lt;#StopPrice&gt;, "Stop Loss"))
    CoverAtLimit(bar + 1, p, &lt;#ProfitTgt&gt;, "Profit Target");
</Body>
    <Plotting>PlotStops();
</Plotting>
    <RuleType>ShortExit</RuleType>
    <ID>dd1c4554-e861-4c8b-8a77-d452f6c9ef07</ID>
    <Parameters>
      <RuleParameter>
        <Name>Profit Pct</Name>
        <Value>8</Value>
        <DefaultValue>8</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>Stop Pct</Name>
        <Value>2</Value>
        <DefaultValue>2</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>1</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>StopPrice</Name>
      </RuleVariable>
      <RuleVariable>
        <Name>ProfitTgt</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator % above moving average</Name>
    <Description>Occurs when an indicator is above its moving average by a specified percent</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Percent&gt; / 100.0d);
if (&lt;#Indicator&gt;[bar] &gt; &lt;#ma&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d + &lt;#Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>f3dbdb2b-3e5f-422a-a783-051b04209b0d</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is above by</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Indicator % below moving average</Name>
    <Description>Occurs when an indicator is above its moving average by a specified percent</Description>
    <Category>General Indicators</Category>
    <Init />
    <Body>DataSeries &lt;#ma&gt; = &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Percent&gt; / 100.0d);
if (&lt;#Indicator&gt;[bar] &lt; &lt;#ma&gt;[bar])
</Body>
    <Plotting>PlotSeries(PricePane, &lt;#MA Type&gt;.Series(&lt;#MA Basis&gt;, &lt;#MA Period&gt;) * (1.0d - &lt;#Percent&gt; / 100.0d), Color.Red, LineStyle.Solid, 2);
</Plotting>
    <RuleType>Condition</RuleType>
    <ID>f3dbdb2b-3e5f-422a-a783-051b04209b0d</ID>
    <Parameters>
      <RuleParameter>
        <Name>Indicator</Name>
        <Value>[Click here to select an Indicator]</Value>
        <DefaultValue>[Click here to select an Indicator]</DefaultValue>
        <ParamType>Indicator</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration>is below by</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>Percent</Name>
        <Value>5</Value>
        <DefaultValue>5</DefaultValue>
        <ParamType>Float</ParamType>
        <Start>0</Start>
        <Stop>100</Stop>
        <Step>1</Step>
        <Decoration>%</Decoration>
      </RuleParameter>
      <RuleParameter>
        <Name>MA Type</Name>
        <Value>SM</Value>
        <DefaultValue>SMA;EMAModern;EMALegacy;WMA;VMA;</DefaultValue>
        <ParamType>ListOfStrings</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Basis</Name>
        <Value>Close</Value>
        <DefaultValue>Close</DefaultValue>
        <ParamType>StandardDataSeries</ParamType>
        <Start>0</Start>
        <Stop>0</Stop>
        <Step>0</Step>
        <Decoration />
      </RuleParameter>
      <RuleParameter>
        <Name>MA Period</Name>
        <Value>20</Value>
        <DefaultValue>20</DefaultValue>
        <ParamType>Integer</ParamType>
        <Start>2</Start>
        <Stop>200</Stop>
        <Step>1</Step>
        <Decoration />
      </RuleParameter>
    </Parameters>
    <Variables>
      <RuleVariable>
        <Name>ma</Name>
      </RuleVariable>
    </Variables>
    <UsingClause />
  </Rule>
  <Rule>
    <Name>Date is last trading day of month</Name>
    <Description>True when the bar occurs on the last trading day of the month.</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>if(DateRules.IsLastTradingDayOfMonth(Bars.Date[bar]))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>4f66fad2-55e9-4502-98ac-0c1c96805a78</ID>
    <Parameters />
    <Variables />
    <UsingClause>WealthLab.Rules;</UsingClause>
  </Rule>
  <Rule>
    <Name>Date is last trading day of quarter</Name>
    <Description>True when the bar occurs on the last trading day of the quarter. Quarter end months are March, June, September, and December.</Description>
    <Category>Date/Time</Category>
    <Init />
    <Body>if(DateRules.IsLastTradingDayOfQuarter(Bars.Date[bar]))
</Body>
    <Plotting />
    <RuleType>Condition</RuleType>
    <ID>3a03ed34-3390-4b70-91aa-e4a91de7446d</ID>
    <Parameters />
    <Variables />
    <UsingClause>WealthLab.Rules;</UsingClause>
  </Rule>
</ArrayOfRule>